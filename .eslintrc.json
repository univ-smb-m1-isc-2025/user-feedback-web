{
  "root": true,
  "parserOptions": {
    "ecmaVersion": 2020
  },
  "reportUnusedDisableDirectives": true,
  "overrides": [
    {
      "files": ["*.ts"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": ["tsconfig.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:unicorn/recommended"
      ],
      "rules": {
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": ["uf", "app"],
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": ["uf", "app"],
            "style": "camelCase"
          }
        ],
        "@stylistic/js/quotes": [
          "error",
          "single",
          {
            "avoidEscape": true
          }
        ],
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_",
            "ignoreRestSiblings": true
          }
        ],
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array"
          }
        ],
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "property",
            "format": ["camelCase", "UPPER_CASE", "snake_case"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "enum",
            "format": ["PascalCase"]
          },
          {
            "selector": "enumMember",
            "format": ["PascalCase", "UPPER_CASE"]
          },
          {
            "selector": "typeParameter",
            "format": ["PascalCase"]
          },
          {
            "selector": "typeAlias",
            "format": ["PascalCase"]
          },
          {
            "selector": "interface",
            "format": ["PascalCase"]
          },
          {
            "selector": "classProperty",
            "format": ["camelCase", "PascalCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "objectLiteralMethod",
            "format": ["camelCase", "PascalCase", "UPPER_CASE"]
          },
          {
            "selector": "objectLiteralProperty",
            "format": null,
            "modifiers": ["requiresQuotes"]
          },
          {
            "selector": "class",
            "format": ["PascalCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "PascalCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "objectLiteralProperty",
            "format": ["camelCase", "PascalCase", "UPPER_CASE", "snake_case"]
          },
          {
            "selector": "function",
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "allow"
          }
        ],
        "@typescript-eslint/no-empty-function": "warn",
        "@typescript-eslint/explicit-function-return-type": "error",
        "import/order": [
          "error",
          {
            "groups": [
              "builtin",
              "external",
              "internal",
              ["index", "sibling", "parent", "object"]
            ],
            "newlines-between": "always-and-inside-groups",
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            }
          }
        ],
        "no-underscore-dangle": [
          "error",
          {
            "allowAfterThis": true
          }
        ],
        "object-shorthand": "error",
        "prefer-const": "error",
        "space-before-function-paren": "off",
        "unicorn/consistent-function-scoping": "off",
        "rxjs/no-unsafe-switchmap": "warn",
        "unicorn/prevent-abbreviations": "off"
      },
      "plugins": ["eslint-plugin-import", "rxjs", "@stylistic/eslint-plugin-js"]
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {}
    },
    {
      "files": ["*.js"],
      "extends": ["eslint:recommended"]
    }
  ]
}
